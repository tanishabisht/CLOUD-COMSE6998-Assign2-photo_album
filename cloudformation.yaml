# CloudFormation template format
AWSTemplateFormatVersion: 2010-09-09 



# Function ke parameters
Parameters:
  S3LambdaName:
    Type: String
    Default: photo-gallery-lambda-tb3061
  S3FrontendBucketName:
    Type: String
    Default: photo-gallery-fe-tb3061
  S3AssetsBucketName:
    Type: String
    Default: photo-images-tb3061
  IndexLF1Name:
    Type: String
    Default: index-photos-lf1-tb3061
  SearchLF2Name:
    Type: String
    Default: search-photos-lf2-tb3061



# AWS resources that you want to create and configure
Resources:

  AssetsBucket:
    Type: AWS::S3::Bucket
    DependsOn: IndexLambda1InvokePermissionForAssetsBucket
    Properties:
      BucketName: !Ref S3AssetsBucketName # name of the bucket
      AccessControl: Private # bucket owner has full access and object users have read access
      NotificationConfiguration: # what does the s3 bucket trigger? ... HERE: once the user inputs image in s3, lambda function for indexing photos is triggered
        LambdaConfigurations: # Lambda function is evoked when
          - Event: s3:ObjectCreated:Put # this event occurs ... HERE: when an object is created in s3 bucket
            Function: !GetAtt [IndexLambda1, Arn] # what lambda function should be evoked ... HERE: index photos lambda function

  AssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Sid: "PublicReadGetObject"
            Effect: "Allow"
            Principal: "*"
            Action: "s3:GetObject"
            Resource: "arn:aws:s3:::photo-images-tb3061/*"
      Bucket: !Ref S3AssetsBucketName

  IndexLambda1InvokePermissionForAssetsBucket:
    Type: AWS::Lambda::Permission # grants an AWS service or another account permission to use a function
    DependsOn: IndexLambda1
    Properties:
      Action: lambda:InvokeFunction
      # EXAMPLE 1: FunctionName: arn:aws:lambda:us-west-2:123456789012:function:my-function
      # EXAMPLE 2: FunctionName: Arn:function:IndexLambda1
      # EXAMPLE 3:
      FunctionName:
        Fn::GetAtt: # AWS function to get the attributes
          - IndexLambda1
          - Arn
      Principal: s3.amazonaws.com # AWS service / account that invokes the function
      SourceArn: # ARN of the AWS service / account that invokes the function
        Fn::Sub: arn:aws:s3:::${S3AssetsBucketName} # AWS function for string substitution

  IndexLambda1:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        # S3Bucket: !Ref S3LambdaName
        # S3Key: deployment_package1.zip
        ZipFile: |
          import json
          def lambda_handler(event, context):
              print(json.dumps(event, indent=2))
              response = {
                  "statusCode": 200,
                  "body": json.dumps('Hello again from Lambda!')
              }
              return response
      Description: Lambda function 1 Index Photos
      Environment:
        Variables:
          REGION: us-west-1
      FunctionName: !Ref IndexLF1Name
      Handler: lambda_function.lambda_handler # specifies the name of the entry point for the Lambda function
      MemorySize: 128 # min: 128; max: 10240;
      # PackageType: Zip
      # Policy: 
      Role: !GetAtt [IndexLambda1Role, Arn]
      Runtime: python3.9
      Timeout: 30

  IndexLambda1Role: # this is the universal role given to the lambda function
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: { # Trust relationships: defining relationship between roles and resources ... tells which resources can take up the role and under what condition
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      }
      Description: This is universal role given to lambda function 1
      ManagedPolicyArns: [ # Specifies a list of ARNs of policies that are attached to the IAM role
        'arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess',
        'arn:aws:iam::aws:policy/AmazonRekognitionFullAccess',
        'arn:aws:iam::aws:policy/AmazonS3FullAccess',
      ]
      Path: '/' # location where your role is located ... represent an organizational structure within IAM ... '/development/' '/users/'
      Policies: # Specifies the inline policies that are attached to the IAM role
        - PolicyName: "policy-lf1-cloudwatch-inline-tb3061"
          PolicyDocument: {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "logs:CreateLogGroup",
                "Resource": "arn:aws:logs:us-west-1:695257576362:*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": [
                  "arn:aws:logs:us-west-1:695257576362:log-group:/aws/lambda/index-photos-lf1-tb3061:*"
                ]
              }
            ]
          }
        - PolicyName: "policy-lf1-s3-inline-tb3061"
          PolicyDocument: {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "s3:GetObject",
                  "s3:PutObject",
                  "s3:ListBucket",
                  "s3:DeleteObject"
                ],
                "Resource": [
                  "arn:aws:s3:::photo-images-tb3061/*",
                  "arn:aws:s3:::photo-images-tb3061"
                ]
              }
            ]
          }
      RoleName: index-photos-role-lf1-tb3061
