# CloudFormation template format
AWSTemplateFormatVersion: 2010-09-09 



# Function ke parameters
Parameters:
  S3LambdaName:
    Type: String
    Default: photo-gallery-lambda-tb3061
  S3FrontendBucketName:
    Type: String
    Default: photo-gallery-fe-tb3061
  S3AssetsBucketName:
    Type: String
    Default: photo-images-tb3061
  IndexLF1Name:
    Type: String
    Default: index-photos-lf1-tb3061
  SearchLF2Name:
    Type: String
    Default: search-photos-lf2-tb3061



# AWS resources that you want to create and configure
Resources:

  AssetsBucket:
    Type: AWS::S3::Bucket
    DependsOn: IndexLambda1InvokePermissionForAssetsBucket
    Properties:
      BucketName: !Ref S3AssetsBucketName # name of the bucket
      AccessControl: PublicRead # bucket owner has full access and object users have read access
      NotificationConfiguration: # what does the s3 bucket trigger? ... HERE: once the user inputs image in s3, lambda function for indexing photos is triggered
        LambdaConfigurations: # Lambda function is evoked when
          - Event: s3:ObjectCreated:Put # this event occurs ... HERE: when an object is created in s3 bucket
            Function: !GetAtt [IndexLambda1, Arn] # what lambda function should be evoked ... HERE: index photos lambda function

  AssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument: 
      {
        "Version": "2012-10-17",
        "Statement": [
          {
              "Sid": "PublicReadGetObject",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:GetObject",
              "Resource": "arn:aws:s3:::photo-images-tb3061/*"
          },
          {
              "Sid": "ListObjectsInBucket",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:ListBucket",
              "Resource": "arn:aws:s3:::photo-images-tb3061"
          },
          {
              "Sid": "AllObjectActions",
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:*Object",
              "Resource": "arn:aws:s3:::photo-images-tb3061/*"
          }
        ]
      }
      Bucket: !Ref S3AssetsBucketName

  IndexLambda1InvokePermissionForAssetsBucket:
    Type: AWS::Lambda::Permission # grants an AWS service or another account permission to use a function
    DependsOn: IndexLambda1
    Properties:
      Action: lambda:InvokeFunction
      # EXAMPLE 1: FunctionName: arn:aws:lambda:us-west-2:123456789012:function:my-function
      # EXAMPLE 2: FunctionName: Arn:function:IndexLambda1
      # EXAMPLE 3:
      FunctionName:
        Fn::GetAtt: # AWS function to get the attributes
          - IndexLambda1
          - Arn
      Principal: s3.amazonaws.com # AWS service / account that invokes the function
      SourceArn: # ARN of the AWS service / account that invokes the function
        Fn::Sub: arn:aws:s3:::${S3AssetsBucketName} # AWS function for string substitution

  IndexLambda1:
    Type: AWS::Lambda::Function
    Properties:
      Architectures: x86_64
      Code:
        # S3Bucket: !Ref S3LambdaName
        # S3Key: deployment_package1.zip
        ZipFile: |
          import json
          def lambda_handler(event, context):
              print(json.dumps(event, indent=2))
              response = {
                  "statusCode": 200,
                  "body": json.dumps('Hello again from Lambda!')
              }
              return response
      Description: Lambda function 1 Index Photos
      Environment:
        Variables:
          REGION: us-east-1
      FunctionName: !Ref IndexLF1Name
      Handler: lambda_function.lambda_handler # specifies the name of the entry point for the Lambda function
      MemorySize: 128 # min: 128; max: 10240;
      # PackageType: Zip
      # Policy: 
      Role: !GetAtt [IndexLambda1Role, Arn]
      Runtime: python3.9
      Timeout: 30

  IndexLambda1Role: # this is the universal role given to the lambda function
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: { # Trust relationships: defining relationship between roles and resources ... tells which resources can take up the role and under what condition
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      }
      Description: This is universal role given to lambda function 1
      ManagedPolicyArns: [ # Specifies a list of ARNs of policies that are attached to the IAM role
        'arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess',
        'arn:aws:iam::aws:policy/AmazonRekognitionFullAccess',
        'arn:aws:iam::aws:policy/AmazonS3FullAccess',
      ]
      Path: '/' # location where your role is located ... represent an organizational structure within IAM ... '/development/' '/users/'
      Policies: # Specifies the inline policies that are attached to the IAM role
        - PolicyName: "policy-lf1-inline-tb3061"
          PolicyDocument: {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "logs:CreateLogGroup",
                "Resource": "arn:aws:logs:us-east-1:695257576362:*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": [
                  "arn:aws:logs:us-east-1:695257576362:log-group:/aws/lambda/index-photos-lf1-tb3061:*"
                ]
              }
            ]
          }
      RoleName: index-photos-role-lf1-tb3061




  ClientBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3FrontendBucketName
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "PublicReadGetObject",
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:GetObject",
            "Resource": "arn:aws:s3:::photo-gallery-fe-tb3061/*"
          }
        ]
      }
      Bucket: !Ref S3FrontendBucketName




  SearchLambda2:
    Type: AWS::Lambda::Function
    Properties:
      Architectures: x86_64
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
            print(json.dumps(event, indent=2))
            response = {
                "statusCode": 200,
                "body": json.dumps('Hello again from Lambda!')
            }
            return response
      Description: Lambda function 1 Search Photos  
      Environment:
        Variables:
          REGION: us-east-1 
      FunctionName: !Ref SearchLF2Name
      Handler: lambda_function.lambda_handler # specifies the name of the entry point for the Lambda function
      MemorySize: 128 # min: 128; max: 10240;
      Role: !GetAtt [SearchLambda2Role, Arn]
      Runtime: python3.9
      Timeout: 30
 
  SearchLambda2Role:    
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      }
      Description: This is universal role given to lambda function 2
      ManagedPolicyArns: [ # Specifies a list of ARNs of policies that are attached to the IAM role
        'arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess',
        'arn:aws:iam::aws:policy/AmazonLexFullAccess',
        'arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess'
      ]
      Path: '/' # location where your role is located ... represent an organizational structure within IAM ... '/development/' '/users/'
      Policies: # Specifies the inline policies that are attached to the IAM role
        - PolicyName: "policy-lf2-inline-tb3061"
          PolicyDocument: {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": "logs:CreateLogGroup",
                "Resource": "arn:aws:logs:us-east-1:695257576362:*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": [
                  "arn:aws:logs:us-east-1:695257576362:log-group:/aws/lambda/search-photos-lf2-tb3061:*"
                ]
              }
            ]
          }
      RoleName: search-photos-role-lf2-tb3061




  ApiGatewayInstance:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Photo Gallery
      Description: AI Photo Search application, built during the Cloud and Big Data course at Columbia University
      BinaryMediaTypes: ["*/*"]
      Body: 
        swagger: "2.0"
        info:
          description: "AI Photo Search application, built during the Cloud and Big Data course\
            \ at Columbia University."
          version: "1.0.0"
          title: "Photo Album"
        host: "a3bkr5s9v9.execute-api.us-east-1.amazonaws.com"
        basePath: "/gbm1"
        schemes:
        - "https"
        paths:
          /search:
            get:
              operationId: "searchPhotos"
              produces:
              - "application/json"
              parameters:
              - name: "q"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/SearchResponse"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  schema:
                    $ref: "#/definitions/Error"
                "403":
                  description: "403 response"
                  schema:
                    $ref: "#/definitions/Error"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:695257576362:function:search-photos/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestParameters:
                  integration.request.querystring.q: "method.request.querystring.q"
                passthroughBehavior: "when_no_match"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /upload/{bucket}/{filename}:
            put:
              operationId: "uploadPhoto"
              produces:
              - "application/json"
              parameters:
              - name: "filename"
                in: "path"
                required: true
                type: "string"
              - name: "bucket"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/MODELfcbce7"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                "500":
                  description: "500 response"
                  schema:
                    $ref: "#/definitions/Error"
                "403":
                  description: "403 response"
                  schema:
                    $ref: "#/definitions/Error"
              x-amazon-apigateway-integration:
                credentials: "arn:aws:iam::695257576362:role/upload-image-to-s3"
                httpMethod: "PUT"
                uri: "arn:aws:apigateway:us-east-1:s3:path/{bucket}/{filename}"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestParameters:
                  integration.request.path.filename: "method.request.path.filename"
                  integration.request.path.bucket: "method.request.path.bucket"
                passthroughBehavior: "when_no_match"
                type: "aws"
            options:
              consumes:
              - "application/json"
              parameters:
              - name: "bucket"
                in: "path"
                required: true
                type: "string"
              - name: "filename"
                in: "path"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'*'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
        securityDefinitions:
          api_key:
            type: "apiKey"
            name: "x-api-key"
            in: "header"
        definitions:
          MODELfcbce7:
            type: "object"
          Error:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int32"
              message:
                type: "string"
          Photo:
            type: "object"
            properties:
              url:
                type: "string"
              labels:
                type: "array"
                items:
                  type: "string"
          SearchResponse:
            type: "object"
            properties:
              results:
                type: "array"
                items:
                  $ref: "#/definitions/Photo"
        x-amazon-apigateway-binary-media-types:
          - "image/png"
          - "image/jpeg"
          - "image/jpg"

  ApiGatewayDeploymentInstance:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId: !Ref ApiGatewayInstance

  ApiGatewayStageInstance:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: v1
      DeploymentId: ApiGatewayDeploymentInstance
      RestApiId: ApiGatewayInstance
      CacheClusterEnabled: false
      CacheClusterSize: "0.5"
      TracingEnabled: false
      MethodSettings: 
        - 
          CacheDataEncrypted: false
          CacheTtlInSeconds: 300
          CachingEnabled: false
          DataTraceEnabled: false
          HttpMethod: "*"
          MetricsEnabled: false
          ResourcePath: "/*"
          ThrottlingBurstLimit: 5000
          ThrottlingRateLimit: 10000




  OpenSearchInstance:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: photos-tb3061
      ClusterConfig:
        InstanceType: t3.small.search
        InstanceCount: 1
      EBSOptions: 
        EBSEnabled: True
        VolumeType: gp2
        VolumeSize: 10
      AccessPolicies: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "AWS": "*"
            },
            "Action": "es:*",
            "Resource": "arn:aws:es:us-east-1:695257576362:domain/photos-tb3061/*"
          }
        ]
      }




Outputs:
  WebsiteURL:
    Value: !GetAtt
      - ClientBucket
      - WebsiteURL
    Description: URL for website hosted on S3
  S3BucketSecureURL:
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - ClientBucket
          - DomainName
    Description: Name of S3 bucket to hold website content